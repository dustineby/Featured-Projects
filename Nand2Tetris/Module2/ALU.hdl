// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Mux x & false, zx select
    Mux16(a=x, b=false, sel=zx, out=xMux);
    // Create not(x), mux x & not(x), nx select
    Not16(in=xMux, out=xNot);
    // Output through these 2 operations is xPrep
    Mux16(a=xMux, b=xNot, sel=nx, out=xPrep);

    // Mux y & false, zy select
    Mux16(a=y, b=false, sel=zy, out=yMux);
    // Create not(y), mux y & not(y), ny select
    Not16(in=yMux, out=yNot);
    // Output through these 2 operations is yPrep
    Mux16(a=yMux, b=yNot, sel=ny, out=yPrep);

    // And & Add xPrep & yPrep
    And16(a=xPrep, b=yPrep, out=xyAnd);
    Add16(a=xPrep, b=yPrep, out=xyAdd);
    // f selects whether to use And or Add
    Mux16(a=xyAnd, b=xyAdd, sel=f, out=xyPost);

    // Create not(xyPost)
    Not16(in=xyPost, out=xyNot);
    // no selects between xyPost and not(xyPost)
    // Main output is out
    // output is also halved for zr, outZa & outZb
    // MSB is 1 if out < 0, so set ng = out[15]
    Mux16(a=xyPost, b=xyNot, sel=no, out=out, 
        out[0..7]=outZa, out[8..15]=outZb, out[15]=ng);

    // Or8Way through both halves to check if all 0s
    Or8Way(in=outZa, out=orA);
    Or8Way(in=outZb, out=orB);

    // Or through output of both halves
    Or(a=orA, b=orB, out=orS);
    // Want zr == 1 if output is 0, so not end result of Ors
    Not(in=orS, out=zr);
}