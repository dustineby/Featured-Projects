// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/a/PC.hdl
/**
 * A 16-bit counter.
 * if      reset(t): out(t+1) = 0
 * else if load(t):  out(t+1) = in(t)
 * else if inc(t):   out(t+1) = out(t) + 1
 * else              out(t+1) = out(t)
 */
CHIP PC {
    IN in[16], reset, load, inc;
    OUT out[16];
    
    PARTS:
    /*
    Want a "chain of flags"
    We will work in reverse, so that heirarchy of flags is as desired
    We first  take a loop output from register and increment it
    Then mux that with load, selected by status of load bit 
    In this way, load bit overrides inc bit
    We then mux load output with "false", selected by reset bit
    So reset will override load bit
    We then only need to know if any control bits were selected, so we OR them
    And use the resulting flag as selector for our load function in the register itself
    */

    // Or all triggers together to create 1 flag
    // If flag is 1 (reset OR load OR inc is 1), register will load new data
    Or(a=reset, b=load, out=intOr);
    Or(a=intOr, b=inc, out=flagOr);

    // Take current register value and increment it
    Inc16(in=loopOut, out=incOut);
    // If load asserted, choose input, else choose incremented value 
    Mux16(a=incOut, b=in, sel=load, out=loadOut);
    // If reset asserted, choose false, else choose previous mux gate output
    Mux16(a=loadOut, b=false, sel=reset, out=resetOut);

    // Load value of mux gates if "assert" is flagged
    Register(in=resetOut, load=flagOr, out=out, out=loopOut);
}