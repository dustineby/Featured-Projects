// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM512.hdl
/**
 * Memory of 512 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    // 8-way demux to seperate load bit by address 3 MSB
    DMux8Way(in=load, sel=address[6..8], a=dmA, b=dmB, c=dmC, d=dmD, e=dmE, f=dmF, g=dmG, h=dmH);

    // RAM64 now demuxes to sperate by address 6 LSB
    // And only selects the register of that 9-bit address
    RAM64(in=in, load=dmA, address=address[0..5], out=ramA);
    RAM64(in=in, load=dmB, address=address[0..5], out=ramB);
    RAM64(in=in, load=dmC, address=address[0..5], out=ramC);
    RAM64(in=in, load=dmD, address=address[0..5], out=ramD);
    RAM64(in=in, load=dmE, address=address[0..5], out=ramE);
    RAM64(in=in, load=dmF, address=address[0..5], out=ramF);
    RAM64(in=in, load=dmG, address=address[0..5], out=ramG);
    RAM64(in=in, load=dmH, address=address[0..5], out=ramH);

    // Mux together and choose output of whole address
    Mux8Way16(a=ramA, b=ramB, c=ramC, d=ramD, e=ramE, f=ramF, g=ramG, h=ramH, sel=address[6..8], out=out);
}